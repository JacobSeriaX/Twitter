// TODO: –ó–∞–º–µ–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–≤–æ–∏ –∏–∑ Firebase
const firebaseConfig = {
    apiKey: "AIzaSyAuxFcoW-cV8rxAow9IvIdSkgk9NwSyx3M",
    authDomain: "twitter-c89f3.firebaseapp.com",
    projectId: "twitter-c89f3",
    storageBucket: "twitter-c89f3.firebasestorage.app",
    messagingSenderId: "719202520636",
    appId: "1:719202520636:web:01f0851ced15e393607d39"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
const db = firebase.firestore();

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const showRegister = document.getElementById('show-register');
const showLogin = document.getElementById('show-login');
const loginForm = document.getElementById('login-form');
const registerForm = document.getElementById('register-form');
const registerButton = document.getElementById('register-button');
const loginButton = document.getElementById('login-button');
const authContainer = document.getElementById('auth-container');
const mainContainer = document.getElementById('main-container');
const logoutButton = document.getElementById('logout-button');

const profileUsername = document.getElementById('profile-username');
const postButton = document.getElementById('post-button');
const postContent = document.getElementById('post-content');
const feed = document.getElementById('feed');

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ—Ä–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–∞
showRegister.addEventListener('click', (e) => {
    e.preventDefault();
    loginForm.style.display = 'none';
    registerForm.style.display = 'block';
});

showLogin.addEventListener('click', (e) => {
    e.preventDefault();
    registerForm.style.display = 'none';
    loginForm.style.display = 'block';
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
registerButton.addEventListener('click', () => {
    const email = document.getElementById('register-username').value.trim();
    const password = document.getElementById('register-password').value.trim();

    if (email === '' || password === '') {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.');
        return;
    }

    auth.createUserWithEmailAndPassword(email, password)
        .then((userCredential) => {
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
            return db.collection('users').doc(userCredential.user.uid).set({
                email: email,
                createdAt: firebase.firestore.FieldValue.serverTimestamp()
            });
        })
        .then(() => {
            alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
        })
        .catch((error) => {
            alert(`–û—à–∏–±–∫–∞: ${error.message}`);
        });
});

// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
loginButton.addEventListener('click', () => {
    const email = document.getElementById('login-username').value.trim();
    const password = document.getElementById('login-password').value.trim();

    if (email === '' || password === '') {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.');
        return;
    }

    auth.signInWithEmailAndPassword(email, password)
        .then(() => {
            // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
        })
        .catch((error) => {
            alert(`–û—à–∏–±–∫–∞: ${error.message}`);
        });
});

// –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
auth.onAuthStateChanged((user) => {
    if (user) {
        authContainer.style.display = 'none';
        mainContainer.style.display = 'block';
        loadProfile(user);
        loadFeed();
    } else {
        authContainer.style.display = 'block';
        mainContainer.style.display = 'none';
        feed.innerHTML = ''; // –û—á–∏—Å—Ç–∏—Ç—å –ª–µ–Ω—Ç—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadProfile(user) {
    profileUsername.textContent = `–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: ${user.email}`;
}

// –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
logoutButton.addEventListener('click', () => {
    auth.signOut()
        .then(() => {
            // –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥
        })
        .catch((error) => {
            alert(`–û—à–∏–±–∫–∞: ${error.message}`);
        });
});

// –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
postButton.addEventListener('click', () => {
    const content = postContent.value.trim();
    const user = auth.currentUser;

    if (content === '') {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
        return;
    }

    if (user) {
        db.collection('posts').add({
            userId: user.uid,
            content: content,
            createdAt: firebase.firestore.FieldValue.serverTimestamp()
        })
        .then(() => {
            postContent.value = '';
            // –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å loadFeed(), —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º onSnapshot()
        })
        .catch((error) => {
            alert(`–û—à–∏–±–∫–∞: ${error.message}`);
        });
    }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –ª–µ–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
function loadFeed() {
    feed.innerHTML = '';

    db.collection('posts')
        .orderBy('createdAt', 'desc')
        .limit(50)
        .onSnapshot((querySnapshot) => {
            feed.innerHTML = ''; // –û—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            querySnapshot.forEach((doc) => {
                const post = doc.data();
                const postId = doc.id;

                // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞
                const postDiv = document.createElement('div');
                postDiv.classList.add('post');

                // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db.collection('users').doc(post.userId).get().then((userDoc) => {
                    const userData = userDoc.data();
                    const date = post.createdAt ? post.createdAt.toDate() : new Date();
                    const formattedDate = formatDate(date);

                    postDiv.innerHTML = `
                        <p><strong>${userData.email}</strong> <span>${formattedDate}</span></p>
                        <p>${post.content}</p>
                        <div class="reactions-container" id="reactions-${postId}">
                            <!-- –†–µ–∞–∫—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å -->
                        </div>
                    `;
                    feed.appendChild(postDiv);

                    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞
                    loadReactions(postId);
                });
            });
        }, (error) => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: ", error);
        });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(date) {
    const now = new Date();
    const diffTime = now - date;
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays === 0) {
        return `–°–µ–≥–æ–¥–Ω—è –≤ ${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')}`;
    } else if (diffDays === 1) {
        return `–í—á–µ—Ä–∞ –≤ ${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')}`;
    } else {
        return `${date.toLocaleDateString()} –≤ ${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')}`;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π
function loadReactions(postId) {
    const reactionsContainer = document.getElementById(`reactions-${postId}`);

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ä–µ–∞–∫—Ü–∏–π
    const reactionTypes = [
        { type: 'like', icon: 'üëç' },
        { type: 'fire', icon: 'üî•' },
        { type: 'heart', icon: '‚ù§Ô∏è' },
        { type: 'laugh', icon: 'üòÇ' }
    ];

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentUser = auth.currentUser;

    // –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–∞–∫—Ü–∏—è—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞
    db.collection('posts').doc(postId).collection('reactions')
        .onSnapshot((querySnapshot) => {
            const reactionsCount = {};

            querySnapshot.forEach((doc) => {
                const reaction = doc.data();
                if (reactionsCount[reaction.type]) {
                    reactionsCount[reaction.type]++;
                } else {
                    reactionsCount[reaction.type] = 1;
                }
            });

            // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∞–∫—Ü–∏–π –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            reactionsContainer.innerHTML = '';

            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ä–µ–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É
            reactionTypes.forEach((reaction) => {
                const count = reactionsCount[reaction.type] || 0;

                // –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç—É —Ä–µ–∞–∫—Ü–∏—é
                let userReacted = false;
                let userReactionDocId = null;

                querySnapshot.forEach((doc) => {
                    const reactionData = doc.data();
                    if (reactionData.type === reaction.type && reactionData.userId === currentUser.uid) {
                        userReacted = true;
                        userReactionDocId = doc.id;
                    }
                });

                // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏
                const reactionButton = document.createElement('button');
                reactionButton.classList.add('reaction-button');
                reactionButton.innerHTML = `
                    <span class="reaction-icon">${reaction.icon}</span>
                    <span class="reaction-count">${count}</span>
                `;

                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª —ç—Ç—É —Ä–µ–∞–∫—Ü–∏—é, –≤—ã–¥–µ–ª—è–µ–º –µ—ë
                if (userReacted) {
                    reactionButton.style.color = '#1da1f2';
                } else {
                    reactionButton.style.color = '#657786';
                }

                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è
                reactionButton.addEventListener('click', () => {
                    handleReaction(postId, reaction.type, userReacted, userReactionDocId)
                        .then(() => {
                            // –†–µ–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ onSnapshot
                        })
                        .catch((error) => {
                            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: ", error);
                        });
                });

                reactionsContainer.appendChild(reactionButton);
            });
        }, (error) => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∞–∫—Ü–∏–π: ", error);
        });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏
function handleReaction(postId, reactionType, userReacted, reactionDocId) {
    const currentUser = auth.currentUser;
    const reactionRef = db.collection('posts').doc(postId).collection('reactions');

    if (userReacted) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é, —É–¥–∞–ª—è–µ–º –µ—ë
        return reactionRef.doc(reactionDocId).delete();
    } else {
        // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é
        return reactionRef.add({
            type: reactionType,
            userId: currentUser.uid,
            createdAt: firebase.firestore.FieldValue.serverTimestamp()
        });
    }
}
